" Vundle stuff
source ~/.bundles.vim

set nocompatible
set modeline

set relativenumber            "RB: relative line numbers
"set spell

" leader comma
let mapleader = ","

set laststatus=2
"set encoding=utf-8

if has("gui_macvim")
  set guifont=Source\ Code\ Pro:h12
"else
  ""set guifont=Inconsolata\ Medium\ 13
  ""set guifont=Ubuntu\ Mono\ 13
  ""set guifont=Consolas\ 11
  "set guifont=Source\ Code\ Pro\ Medium\ 10
endif

colors zenburn

set hidden

syntax on
set number
set cursorline
set showmatch
set incsearch
set hlsearch
nnoremap <F3> :set hlsearch!<CR>
set ruler
set autoread
" set mouse=a
set cc=80
nnoremap gp `[v`]

set nowrap
set showmatch
set smartcase

set smarttab

filetype plugin indent on

" CtrlP
" Don't change cwd
let g:ctrlp_working_path_mode = '' " or 'rc'
" Mixed mode
let g:ctrlp_cmd = 'CtrlPMixed'
" Gotosymbol Ctrl+R
" map <C-R> :CtrlPBufTagAll<CR>
" do not scan all the files
let g:ctrlp_max_files = 2000
" and use .gitignore
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']


" Detect Indent
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4
autocmd BufNewFile,BufReadPost * :DetectIndent
autocmd FileType make setlocal noexpandtab

set history=1000
set undolevels=1000
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.o
set title

set pastetoggle=<F3>

" Nerdcommenter binding
map <leader>/ <plug>NERDCommenterToggle
imap <leader>/ <Esc><plug>NERDCommenterTogglei

" Nerdtree binding
map <leader>n :NERDTreeToggle<CR>
nmap <leader>m :NERDTreeFind<CR>

" Nerdtree ingore
let NERDTreeIgnore = ['\.pyc$', '\~$', '\.o$', '\.class$', '\.out$', '\.o$']

" Tagbar binding
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Easybuffer
map <leader>b :EasyBufferToggle<CR>

" Don't select the first completion item, menu still if one match
set completeopt=longest,menuone

noremap <F5> :GundoToggle<CR>

" insert new line without leaving Visual mode
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>k

" command mode smartcase completion
set ignorecase
set infercase

" Strip trailing ws
if !exists("*StripWS")
  function StripWS()
      :%s/\s\+$//e
  endfunction
endif


" C-space for omnicomplete
if has("gui_running")
    " C-Space seems to work under gVim on both Linux and win32
    inoremap <C-Space> <C-x><C-o>
else " no gui
  if has("unix")
    inoremap <Nul> <C-x><C-o>
  else
  " I have no idea of the name of Ctrl-Space elsewhere
  endif
endif

set backspace=indent,eol,start

let g:ycm_confirm_extra_conf = 0

""  RB disabled (activates Virtual_Env
" for python command completion relative to Virt_env)
"python << EOF
"import sys, vim, os
"ve_dir = vim.eval('$VIRTUAL_ENV')
"if ve_dir:
"  ve_dir in sys.path or sys.path.insert(0, ve_dir)
"  activate_this = os.path.join(os.path.join(ve_dir, 'bin'), 'activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF
"

"" Ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-s-j>"


let javascript_enable_domhtmlcss = 1
